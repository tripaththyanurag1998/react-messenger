{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","FormControl","Input","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wUAqBeA,EAhBCC,sBAAW,WAAoBC,GAAS,IAA3BC,EAA0B,EAA1BA,QACnBC,EAD6C,EAAlBC,WACLF,EAAQE,SAEpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAQ,mBAAqB,qBAC1C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,OAC5CR,GAAD,UAAcD,EAAQE,SAAtB,KADL,IACyCF,EAAQA,e,iBCEtDU,EAbKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,uCCgDRC,MAlDf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,OAEkBF,mBAAS,CACtC,CAACrB,SAAS,SAAUF,QAAQ,YAC5B,CAACE,SAAS,UAAWF,QAAQ,WAJlB,mBAEN0B,EAFM,KAEGC,EAFH,OAMkBJ,mBAAS,IAN3B,mBAMNrB,EANM,KAMG0B,EANH,KA4Bb,OApBAC,qBAAU,WACPnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GACjEN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAGD,EAAIC,GAAGrC,QAAQoC,EAAIE,iBAE9D,IAEHT,qBAAU,WACRD,EAAYW,OAAO,qBAClB,IAaD,yBAAKpC,UAAU,OACb,kEACA,mCAASD,GACT,kBAACsC,EAAA,EAAD,CAAarC,UAAU,aACrB,kBAACsC,EAAA,EAAD,CAAOC,MAAOlB,EAAOmB,SAAU,SAAAC,GAAK,OAAInB,EAASmB,EAAMC,OAAOH,UAC9D,kBAACI,EAAA,EAAD,CAAYC,UAAWvB,EAAOwB,KAAK,SAASC,QAhB9B,SAACL,GACnBA,EAAMM,iBACNxC,EAAGoB,WAAW,YAAYqB,IAAI,CAC5BnD,QAAQwB,EACRtB,SAASA,EACTkD,UAAUzC,IAASU,UAAUgC,WAAWC,oBAE1C7B,EAAS,KAS6DjB,QAAQ,YAAYD,MAAM,WAC1F,kBAAC,IAAD,QAMJ,kBAAC,IAAD,KACGmB,EAASS,KAAK,gBAAEE,EAAF,EAAEA,GAAGrC,EAAL,EAAKA,QAAL,OACb,kBAAC,EAAD,CAASuD,IAAKlB,EAAInC,SAAUA,EAAUF,QAASA,UC1CrCwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzE,c","file":"static/js/main.f4d1d8d0.chunk.js","sourcesContent":["import React , {forwardRef} from 'react';\r\nimport './Message.css'\r\nimport { Card,CardContent,Typography } from '@material-ui/core';\r\n\r\n\r\nconst Message = forwardRef(({message,username},ref) => {\r\n    const isUser = username === message.username;\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message_user'}`}>\r\n            <Card className={isUser? \"message_usercard\" : \"message_guestcard\"}>\r\n                <CardContent>\r\n                    <Typography  color=\"white\" variant=\"h5\" component=\"h2\">\r\n                        {!isUser && `${message.username}:`} {message.message}\r\n                    </Typography> \r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}) \r\n\r\nexport default Message\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyC0S7XLuD_M3ZP_zffGoG5ui9tRfXi_jc4\",\r\n    authDomain: \"messenger-32356.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-32356.firebaseio.com\",\r\n    projectId: \"messenger-32356\",\r\n    storageBucket: \"messenger-32356.appspot.com\",\r\n    messagingSenderId: \"296506753434\",\r\n    appId: \"1:296506753434:web:d9e5bc85dbb25d65e0fa23\",\r\n    measurementId: \"G-4VMQ3Q8LGW\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, {useState ,useEffect} from 'react';\nimport { FormControl,Input} from '@material-ui/core';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nimport './App.css';\n\nfunction App() {\n  const [input,setInput] = useState('');\n  const [messages,setMessages] = useState([\n    {username:'anurag', message:'hiiiiiii'},\n    {username:'anurag2', message:'hello'}\n  ]);\n  const [username,setUsername] = useState('');\n\n  useEffect(() => {\n     db.collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot =>{\n      setMessages(snapshot.docs.map(doc => ({id:doc.id,message:doc.data()})))\n    });\n  }, [])\n\n  useEffect(() => {\n    setUsername(prompt('enter username'))\n  }, [])\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    db.collection('messages').add({\n      message:input,\n      username:username,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>messenger app using react+firebase</h1>\n      <h2>hey {username}</h2>\n      <FormControl className='app__form'>\n        <Input value={input} onChange={event => setInput(event.target.value)} />\n        <IconButton disabled={!input} type='submit' onClick={sendMessage} variant=\"contained\" color=\"primary\">\n          <SendIcon/>\n        </IconButton>\n      \n      \n      </FormControl>\n\n      <FlipMove>\n        {messages.map( ({id,message}) => (\n          <Message key={id} username={username} message={message}/>\n          ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}